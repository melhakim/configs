" vim:fdm=marker

" Setting Options {{{
    syntax enable
    scriptencoding utf-8
    set shell=/bin/bash
    set encoding=utf-8
    set bs=indent,eol,start
    set et sts=4 ts=4 sw=4
    set ai si
    set wildmode=full wildmenu
    set wildchar=<Tab>
    set ic is hlsearch
    set nu
    set t_Co=256
    set splitbelow splitright
    set listchars=tab:â€º\ ,trail:â€¢,extends:#,nbsp:. " Highlight problematic whitespac "
    set list
    set nowrap
    set laststatus=2 "For airline"
    set winminheight=0
    set hidden
    set rtp+=~/.fzf
    set colorcolumn=120
    set tags^=.git/tags
    set belloff=all
    set printoptions+=header:0
    "set swb
    "set vb
    "set guifont=Menlo\ Regular:h15
" }}}

" {{{ Use fd for ctrlp.
    if executable('fd')
        let g:ctrlp_user_command = 'fd -t f -c never . %s'
        let g:ctrlp_use_caching = 0
    "Stolen from http://codeinthehole.com/writing/using-the-silver-searcher-with-vim/
    elseif executable("rg")
        let g:ctrlp_user_command = 'rg %s --files --glob ""'
        let g:ctrlp_use_caching = 0
    elseif executable("ag")
        set grepprg=ag\ --nogroup\ --nocolor\ --column
        let g:ctrlp_user_command = 'ag %s -l --nogroup --nocolor -g ""'
        let g:ctrlp_use_caching = 0
    endif

    if executable("rg")
        set grepprg=rg\ --no-ignore\ --vimgrep
    end
" }}}

" Global vars {{{
    let mapleader=","
    let NERDTreeQuitOnOpen = 1
    let g:ip_skipfold = 1 " Dont open folds! 
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_keys = "abcdefghijklmnopqrstuvwxyz"
    let g:ctrlp_show_hidden = 1
    let g:ctrlp_match_window = 'results:100'
    let g:ctrlp_max_files = 0
    let g:PreserveNoEOL = 1
    let g:github_access_token="01593d9f1e4b09dc68e1e45eb5cd16e764067da5"
    let g:github_issues_no_omni = 1
    let g:incsearch#auto_nohlsearch = 1
    let &t_TI = ""
    let &t_TE = ""

    " Golang variables
    let g:go_bin_path=expand("~/go/bin")
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_types = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    let g:go_fmt_command = "goimports"
    let g:go_def_mode='godef'
    let g:go_version_warning = 0


    " Open links with xdg-open
    let g:utl_cfg_hdl_scm_http="silent !xdg-open '%u' >/dev/null"


    " GutenTags
    let g:gutentags_ctags_tagfile=".guten-tags"

    let g:org_todo_keywords = [['TODO', 'IN_PROGRESS', '|', 'BLOCKED', 'DONE'],
      \   ['|', 'CANCELED']]
    let g:org_todo_keyword_faces = [['IN_PROGRESS', 'cyan'], ['BLOCKED',
      \   [':foreground red', ':background black', ':weight bold',
      \   ':slant italic', ':decoration underline']]]

    let g:VM_maps = {}
    let g:VM_maps['Select h'] = ''
    let g:VM_maps['Select l'] = ''

" }}}

    nmap // :noh<CR>
    noremap <C-\> :CtrlPFunky<CR>

    noremap ,l iLogger::error();hi

    map <S-M-Left> <C-o>
    map <S-M-Right> <C-i>

    " hjkl
    map L w
    map H b
    "
    map <Leader>ff :Rg <C-r><C-w><CR>
    imap <C-Right> <Plug>(copilot-accept-word)
    
" }}}

" vim-plug Stuff {{{
    set nocompatible              " be iMproved, required
    filetype off                  " required
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif

    call plug#begin()
    " Plugins {{{
        if !empty(glob("$HOME/.php.vim"))
            source "$HOME/.php.vim"
        endif

        Plug 'scrooloose/nerdcommenter'
        Plug 'altercation/vim-colors-solarized'
        Plug 'bling/vim-airline'
        Plug 'vim-airline/vim-airline-themes'
        Plug 'jiangmiao/auto-pairs'
        Plug 'ctrlpvim/ctrlp.vim'
        Plug 'tacahiroy/ctrlp-funky'
        Plug 'vim-scripts/Improved-paragraph-motion'
        Plug 'tpope/vim-fugitive'
        Plug 'tpope/vim-rhubarb'
        Plug 'tpope/vim-surround'
        Plug 'tpope/vim-repeat'
        Plug 'mbbill/undotree'
        Plug 'd11wtq/ctrlp_bdelete.vim'
        Plug 'KabbAmine/zeavim.vim'
        Plug 'vim-scripts/pdv-standalone'
        Plug 'vim-scripts/PreserveNoEOL'
        Plug 'flazz/vim-colorschemes'
        Plug 'xolox/vim-misc'
        Plug 'xolox/vim-notes'
        Plug 'fatih/vim-go'
        Plug 'godlygeek/tabular'
        Plug 'ludovicchabant/vim-gutentags'
        Plug 'mg979/vim-visual-multi' " in favor of 'terryma/vim-multiple-cursors'
        Plug 'pangloss/vim-javascript'
        Plug 'MaxMEllon/vim-jsx-pretty'
        Plug 'leafgarland/typescript-vim'
        Plug 'peitalin/vim-jsx-typescript'
        Plug 'alvan/vim-closetag'
        Plug 'rodjek/vim-puppet'
        Plug 'rust-lang/rust.vim'
        Plug 'hashivim/vim-terraform'
        Plug 'wellle/targets.vim'
        "Plug 'farseer90718/vim-taskwarrior'
        Plug 'neoclide/coc.nvim', {'branch': 'release'}
        "Plug 'junegunn/vim-peekaboo'
        Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
        Plug 'junegunn/fzf.vim'
        Plug 'vim-scripts/AnsiEsc.vim'
        Plug 'dense-analysis/ale'
        Plug 'dag/vim-fish'
        Plug 'shumphrey/fugitive-gitlab.vim'
        Plug 'cespare/vim-toml'
        Plug 'madox2/vim-ai'
        Plug 'github/copilot.vim'

        " Orgmode plugins
        Plug 'jceb/vim-orgmode'
        Plug 'tpope/vim-speeddating'
        Plug 'mattn/calendar-vim'
        Plug 'vim-scripts/taglist.vim'
        Plug 'majutsushi/tagbar'
        Plug 'vim-scripts/utl.vim'

    " }}}
    " All of your Plugins must be added before the following line
    call plug#end()            " required
" }}}
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on

call ctrlp_bdelete#init()

"{{{ COC stuff
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"

" Use <c-space> to trigger completion
if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif
"}}}

" Colorschema {{{
    " Solarized Stuff
    "colorscheme solarized 
    colorscheme iceberg
    set cul
    let g:airline_theme='hybrid'
    highlight Specialkey ctermbg=none
    set background=dark
" }}}

" Initialize directories Stolen from spf13  {{{
function! InitializeDirectories()
    let parent = $HOME
    let prefix = 'vim'
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'swap': 'directory' }

    if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
        set undofile
    endif

    let common_dir = parent . '/.' . prefix . '/'

    for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()
" }}}

" Close Hidden buffers {{{
command! CloseHiddenBuffers call s:CloseHiddenBuffers()
function! s:CloseHiddenBuffers()
  let open_buffers = []

  for i in range(tabpagenr('$'))
    call extend(open_buffers, tabpagebuflist(i + 1))
  endfor

  for num in range(1, bufnr("$") + 1)
    if buflisted(num) && index(open_buffers, num) == -1
      exec "bdelete ".num
    endif
  endfor
endfunction
" }}}

" Format the hyperlinks from github for orgmode {{{

func ConvertLinks()
    %g/^$/d
    %s/ Â·.*//
    %v/https/exec 'norm! ddpI][' | exec 'norm A]]' | exec 'norm! kI[[' | exec 'norm! Jx'
endfunc
command ConvertLinks silent call ConvertLinks()
" }}}

" Zoom / Restore window. {{{
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <Esc>x :ZoomToggle<CR>
" }}}

" fix meta-keys which generate <Esc>a .. <Esc>z {{{
"let c='a'
"while c <= 'z'
  "exec "set <A-".c.">=\e".c
  "exec "imap \e".c." <A-".c.">"
  "let c = nr2char(1+char2nr(c))
"endw

set <A-e>=e
imap e <A-e>

" }}}

" Json Formatting {{{
command! -range=% JsonFormat <line1>,<line2>!python -m json.tool
" }}}

" Autocommands {{{
if has("autocmd")
  au FileType org let maplocalleader="\\"

  "au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif " Jump to the last position 
  "au BufWinLeave *.* mkview
  au BufWinEnter *.* silent loadview
  "au BufWinEnter * let &foldlevel = max(map(range(1, line('$')), 'foldlevel(v:val)')) " Googled 'foldlevelstart not working' to get this one'
  "au BufWinEnter * norm zR
  "Removing <C-]> mapping in help buffers
  "au FileType help :noremap <buffer> <c-]> <c-]>
  au BufNewFile,BufReadPost *.md set filetype=markdown
  au FileType puppet setlocal sw=8
  au FileType javascript setlocal sw=2 ts=2
  au QuickFixCmdPost grep cwindow "Call Cwindow after grep has been invoked
endif
" }}}

" Lessc function {{{
  func Lessc()
    exe "au! BufWritePost" @% ":silent ! lessc " @% expand("%:r").".css"
  endfunc
" }}}
