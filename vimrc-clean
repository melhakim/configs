" vim:fdm=marker
" Setting Options {{{
    syntax enable
    set bs=indent,eol,start
    set et sts=4 ts=4 sw=4
    set ai si
    set wildmode=full wildmenu
    set wildchar=<Tab>
    set ic is hlsearch
    set nu
    set t_Co=256
    set splitbelow splitright
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespac "
    set list
    set nowrap
    set laststatus=2 "For airline"
    set winminheight=0
    set hidden
    set rtp+=~/.fzf
    "Stolen from http://codeinthehole.com/writing/using-the-silver-searcher-with-vim/
    if executable("ag")
        set grepprg=ag\ --nogroup\ --nocolor\ --column
        let g:ctrlp_user_command = 'ag %s -l --nogroup --nocolor -g ""'
        let g:ctrlp_use_caching = 0
    endif
" }}}

" Global vars {{{
    let mapleader=","
    let NERDTreeQuitOnOpen = 1
    let php_folding = 0
    let g:DisableAutoPHPFolding = 0
    let g:ip_skipfold = 1 " Dont open folds! 
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_keys = "abcdefghijklmnopqrstuvwxyz"
    let g:ctrlp_show_hidden = 1
    let g:ctrlp_match_window = 'results:100'
    let g:ctrlp_max_files = 0
    let g:PreserveNoEOL = 1
    let g:github_access_token=""
    let g:github_issues_no_omni = 1
    let g:incsearch#auto_nohlsearch = 1
    let g:neocomplete#enable_at_startup = 1
" }}}

" Personal mapping by Hakim {{{
    " Incsearch {{{
        map /  <Plug>(incsearch-forward)
        map ?  <Plug>(incsearch-backward)
        map g/ <Plug>(incsearch-stay)
        map n  <Plug>(incsearch-nohl-n)
        map N  <Plug>(incsearch-nohl-N)
        map *  <Plug>(incsearch-nohl-*)
        map #  <Plug>(incsearch-nohl-#)
        map g* <Plug>(incsearch-nohl-g*)
        map g# <Plug>(incsearch-nohl-g#)
    " }}}

    nmap // :noh<CR>
    noremap <C-e> :NERDTreeToggle<CR>
    noremap <Leader>e :NERDTreeFind<CR>
    
    noremap <C-\> :CtrlPFunky<CR>
    noremap <Leader>u :UndotreeToggle<CR>
    noremap <F2> :NeoCompleteToggle<CR>
    nmap s <Plug>(easymotion-s)
    nmap S <Plug>(easymotion-bd-w)

    " Window Movements
    noremap <C-J> <C-W>j<C-W>_
    noremap <C-K> <C-W>k<C-W>_
    noremap <C-L> <C-W>l<C-W>_
    noremap <C-H> <C-W>h<C-W>_

    " X will no longer write to register
    "noremap x "_x

    "Neocomplete supertab!
    "inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" }}}

" Vundle Stuff {{{
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " let Vundle manage Vundle, required
    " Plugins {{{
        Plugin 'VundleVim/Vundle.vim'
        Plugin 'scrooloose/nerdtree'
        Plugin 'scrooloose/nerdcommenter'
        Plugin 'altercation/vim-colors-solarized'
        Plugin 'bling/vim-airline'
        Plugin 'vim-airline/vim-airline-themes'
        Plugin 'jiangmiao/auto-pairs'
        Plugin 'ctrlpvim/ctrlp.vim'
        Plugin 'tacahiroy/ctrlp-funky'
        Plugin 'vim-scripts/Improved-paragraph-motion'
        Plugin 'vim-scripts/sessionman.vim'
        Plugin 'rayburgemeestre/phpfolding.vim'
        Plugin 'tpope/vim-fugitive'
        Plugin 'mbbill/undotree'
        Plugin 'Shougo/neocomplete.vim'
        "Plugin 'shawncplus/phpcomplete.vim'
        "Plugin 'Shougo/vimproc'
        "Plugin 'm2mdas/phpcomplete-extended'
        Plugin 'd11wtq/ctrlp_bdelete.vim'
        Plugin 'easymotion/vim-easymotion'
        Plugin 'haya14busa/incsearch.vim'
        Plugin 'KabbAmine/zeavim.vim'
        Plugin 'vim-scripts/pdv-standalone'
        Plugin 'arnaud-lb/vim-php-namespace'
        Plugin 'vim-scripts/PreserveNoEOL'
        Plugin 'jaxbot/github-issues.vim'
        Plugin 'flazz/vim-colorschemes'
        Plugin 'xolox/vim-misc'
        Plugin 'xolox/vim-notes'
        Plugin 'vim-php/vim-php-refactoring'
    " }}}
    " All of your Plugins must be added before the following line
    call vundle#end()            " required
" }}}
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on

call ctrlp_bdelete#init()

" Colorschema {{{
    " Solarized Stuff
    colorscheme solarized 
    set cul
    let g:airline_theme='hybrid'
    highlight Specialkey ctermbg=none
    set background=dark
" }}}

" Initialize directories Stolen from spf13  {{{
function! InitializeDirectories()
    let parent = $HOME
    let prefix = 'vim'
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'swap': 'directory' }

    if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
    endif

    let common_dir = parent . '/.' . prefix . '/'

    for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()
" }}}

" Zoom / Restore window. {{{
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <Esc>x :ZoomToggle<CR>
" }}}

" Json Formatting {{{
command -range=% JsonFormat <line1>,<line2>!python -m json.tool
" }}}

" Autocommands {{{
if has("autocmd")
  "autocmd FileType php set completefunc=phpcomplete#CompletePHP

  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif " Jump to the last position 
  "au BufWinLeave *.* mkview
  au BufWinEnter *.* silent loadview
  "au BufWinEnter * let &foldlevel = max(map(range(1, line('$')), 'foldlevel(v:val)')) " Googled 'foldlevelstart not working' to get this one'
  "au BufWinEnter * norm zR
  "Removing <C-]> mapping in help buffers
  au FileType help :noremap <buffer> <c-]> <c-]>
  au BufNewFile,BufReadPost *.md set filetype=markdown

  " PHP documenter script bound to Leader-d
  autocmd FileType php nnoremap <Leader>d :call PhpDocSingle()<CR>
  autocmd FileType php vnoremap <Leader>d :call PhpDocRange()<CR> 

  " Insert use statements for vim-php-namespace
  autocmd FileType php inoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
  autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>

  autocmd QuickFixCmdPost grep cwindow "Call Cwindow after grep has been invoked
endif
" }}}
