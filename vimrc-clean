" vim:fdm=marker
" Setting Options {{{
    syntax enable
    scriptencoding utf-8
    set encoding=utf-8
    set bs=indent,eol,start
    set et sts=4 ts=4 sw=4
    set ai si
    set wildmode=full wildmenu
    set wildchar=<Tab>
    set ic is hlsearch
    set nu
    set t_Co=256
    set splitbelow splitright
    set listchars=tab:â€º\ ,trail:â€¢,extends:#,nbsp:. " Highlight problematic whitespac "
    set list
    set nowrap
    set laststatus=2 "For airline"
    set winminheight=0
    set hidden
    set rtp+=~/.fzf
    set colorcolumn=120
    set tags^=.git/tags
    "set vb
    "set guifont=Menlo\ Regular:h15
    "Stolen from http://codeinthehole.com/writing/using-the-silver-searcher-with-vim/
    if executable("rg")
        set grepprg=rg\ --no-ignore\ --vimgrep
        let g:ctrlp_user_command = 'rg %s --files --glob ""'
        let g:ctrlp_use_caching = 0
    elseif executable("ag")
        set grepprg=ag\ --nogroup\ --nocolor\ --column
        let g:ctrlp_user_command = 'ag %s -l --nogroup --nocolor -g ""'
        let g:ctrlp_use_caching = 0
    endif
" }}}

" Global vars {{{
    let mapleader=","
    let NERDTreeQuitOnOpen = 1
    let php_folding = 0
    let g:DisableAutoPHPFolding = 0
    let g:ip_skipfold = 1 " Dont open folds! 
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_keys = "abcdefghijklmnopqrstuvwxyz"
    let g:ctrlp_show_hidden = 1
    let g:ctrlp_match_window = 'results:100'
    let g:ctrlp_max_files = 0
    let g:PreserveNoEOL = 1
    let g:github_access_token="01593d9f1e4b09dc68e1e45eb5cd16e764067da5"
    let g:github_issues_no_omni = 1
    let g:incsearch#auto_nohlsearch = 1
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_auto_close_preview=1
    let g:php_refactor_command='~/bin/refactor.phar'
    let &t_TI = ""
    let &t_TE = ""

    " Golang variables
    let g:go_bin_path=expand("~/go/bin")
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_types = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    let g:go_fmt_command = "goimports"
    let g:go_def_mode='godef'
    let g:go_version_warning = 0


    " Open links with xdg-open
    let g:utl_cfg_hdl_scm_http="silent !xdg-open '%u' >/dev/null"

    " Disable PHP Mess detector
    let g:phpqa_messdetector_autorun=0
    let g:phpqa_codesniffer_autorun=0

    " GutenTags
    let g:gutentags_ctags_tagfile=".guten-tags"

    let g:org_todo_keywords = [['TODO', 'IN_PROGRESS', '|', 'BLOCKED', 'DONE'],
      \   ['|', 'CANCELED']]
    let g:org_todo_keyword_faces = [['IN_PROGRESS', 'cyan'], ['BLOCKED',
      \   [':foreground red', ':background black', ':weight bold',
      \   ':slant italic', ':decoration underline']]]

" }}}

    nmap // :noh<CR>
    noremap <C-\> :CtrlPFunky<CR>
    noremap <F2> :NeoCompleteToggle<CR>

    noremap ,l iLogger::error();hi

    map <S-M-Left> <C-o>
    map <S-M-Right> <C-i>

    " hjkl
    map L w
    map H b
    "
" }}}

" Vundle Stuff {{{
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " let Vundle manage Vundle, required
    " Plugins {{{
        "Plugin 'VundleVim/Vundle.vim'
        "Plugin 'scrooloose/nerdtree'
        Plugin 'scrooloose/nerdcommenter'
        Plugin 'altercation/vim-colors-solarized'
        Plugin 'bling/vim-airline'
        Plugin 'vim-airline/vim-airline-themes'
        Plugin 'jiangmiao/auto-pairs'
        Plugin 'ctrlpvim/ctrlp.vim'
        Plugin 'tacahiroy/ctrlp-funky'
        Plugin 'vim-scripts/Improved-paragraph-motion'
        "Plugin 'vim-scripts/sessionman.vim'
        Plugin 'rayburgemeestre/phpfolding.vim'
        Plugin 'tpope/vim-fugitive'
        Plugin 'tpope/vim-rhubarb'
        Plugin 'tpope/vim-surround'
        Plugin 'tpope/vim-repeat'
        Plugin 'mbbill/undotree'
        Plugin 'Shougo/neocomplete.vim'
        Plugin 'd11wtq/ctrlp_bdelete.vim'
        "Plugin 'easymotion/vim-easymotion'
        Plugin 'haya14busa/incsearch.vim'
        Plugin 'KabbAmine/zeavim.vim'
        Plugin 'vim-scripts/pdv-standalone'
        Plugin 'arnaud-lb/vim-php-namespace'
        Plugin 'vim-scripts/PreserveNoEOL'
        "Plugin 'jaxbot/github-issues.vim'
        Plugin 'flazz/vim-colorschemes'
        Plugin 'xolox/vim-misc'
        Plugin 'xolox/vim-notes'
        Plugin 'vim-php/vim-php-refactoring'
        Plugin 'fatih/vim-go'
        Plugin 'godlygeek/tabular'
        Plugin 'stephpy/vim-php-cs-fixer'
        Plugin 'joonty/vim-phpqa'
        Plugin 'ludovicchabant/vim-gutentags'
        "Plugin 'hauleth/sad.vim'
        Plugin 'terryma/vim-multiple-cursors'
        Plugin 'pangloss/vim-javascript'
        Plugin 'mxw/vim-jsx'
        Plugin 'alvan/vim-closetag'
        Plugin 'rodjek/vim-puppet'
        Plugin 'rust-lang/rust.vim'
        Plugin 'hashivim/vim-terraform'

        " Orgmode plugins
        Plugin 'jceb/vim-orgmode'
        Plugin 'tpope/vim-speeddating'
        Plugin 'mattn/calendar-vim'
        Plugin 'vim-scripts/taglist.vim'
        Plugin 'majutsushi/tagbar'
        Plugin 'vim-scripts/utl.vim'

    " }}}
    " All of your Plugins must be added before the following line
    call vundle#end()            " required
" }}}
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on

call ctrlp_bdelete#init()

" Colorschema {{{
    " Solarized Stuff
    colorscheme solarized 
    set cul
    let g:airline_theme='hybrid'
    highlight Specialkey ctermbg=none
    set background=dark
" }}}

" Initialize directories Stolen from spf13  {{{
function! InitializeDirectories()
    let parent = $HOME
    let prefix = 'vim'
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'swap': 'directory' }

    if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
        set undofile
    endif

    let common_dir = parent . '/.' . prefix . '/'

    for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()
" }}}

" Close Hidden buffers {{{
command! CloseHiddenBuffers call s:CloseHiddenBuffers()
function! s:CloseHiddenBuffers()
  let open_buffers = []

  for i in range(tabpagenr('$'))
    call extend(open_buffers, tabpagebuflist(i + 1))
  endfor

  for num in range(1, bufnr("$") + 1)
    if buflisted(num) && index(open_buffers, num) == -1
      exec "bdelete ".num
    endif
  endfor
endfunction
" }}}

" Format the hyperlinks from github for orgmode {{{

func ConvertLinks()
    %g/^$/d
    %s/ Â·.*//
    %v/https/exec 'norm! ddpI][' | exec 'norm A]]' | exec 'norm! kI[[' | exec 'norm! Jx'
endfunc
command ConvertLinks silent call ConvertLinks()
" }}}

" Zoom / Restore window. {{{
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <Esc>x :ZoomToggle<CR>
" }}}

" fix meta-keys which generate <Esc>a .. <Esc>z {{{
"let c='a'
"while c <= 'z'
  "exec "set <A-".c.">=\e".c
  "exec "imap \e".c." <A-".c.">"
  "let c = nr2char(1+char2nr(c))
"endw

set <A-e>=e
imap e <A-e>

" }}}

" Json Formatting {{{
command! -range=% JsonFormat <line1>,<line2>!python -m json.tool
" }}}

" Autocommands {{{
if has("autocmd")
  "autocmd FileType php set completefunc=phpcomplete#CompletePHP
  au FileType org let maplocalleader="\\"

  "au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif " Jump to the last position 
  "au BufWinLeave *.* mkview
  au BufWinEnter *.* silent loadview
  "au BufWinEnter * let &foldlevel = max(map(range(1, line('$')), 'foldlevel(v:val)')) " Googled 'foldlevelstart not working' to get this one'
  "au BufWinEnter * norm zR
  "Removing <C-]> mapping in help buffers
  "au FileType help :noremap <buffer> <c-]> <c-]>
  au BufNewFile,BufReadPost *.md set filetype=markdown

  " PHP documenter script bound to Leader-d
  autocmd FileType php nnoremap <Leader>d :call PhpDocSingle()<CR>
  autocmd FileType php vnoremap <Leader>d :call PhpDocRange()<CR>

  autocmd FileType puppet setlocal sw=8

  " Insert use statements for vim-php-namespace
  autocmd FileType php inoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
  autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>

  autocmd FileType javascript setlocal sw=2 ts=2

  " Remove trailing Whitespaces for PHP files
  autocmd BufWritePre *.php :%s/\s\+$//e

  autocmd QuickFixCmdPost grep cwindow "Call Cwindow after grep has been invoked
endif
" }}}
